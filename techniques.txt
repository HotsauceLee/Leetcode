Questions when giving arguments:

About program:
1. is the input small enough to fit in to ram?
2. what if multithreading?
3. when design data structure, think about trade off between operations.

About input:
1. List: NUll, empty, duplicates, sorted, 
2. Interger: null, 0, overflow
3. String: null, empty, number/alphabit/symbol, space

没思路时用数据走一遍就有头绪了
做题时想： what the fuck do you we NEED?

搜索的时间复杂度：O(答案总数 * 构造每个答案的时间)
举例：Subsets问题，求所有的子集。子集个数一共 2^n，每个集合的平均长度是 O(n) 的，所以时间复杂度为 O(n * 2^n)，同理 Permutations 问题的时间复杂度为：O(n * n!)

动态规划的时间复杂度：O(状态总数 * 计算每个状态的时间复杂度)
举例：triangle，数字三角形的最短路径，状态总数约 O(n^2) 个，计算每个状态的时间复杂度为 O(1)——就是求一下 min。所以总的时间复杂度为 O(n^2)

用分治法解决二叉树问题的时间复杂度：O(二叉树节点个数 * 每个节点的计算时间)
举例：二叉树最大深度。二叉树节点个数为 N，每个节点上的计算时间为 O(1)。总的时间复杂度为 O(N)


1. Backtracking
https://en.wikipedia.org/wiki/Backtracking

If cant avoid using backtracking, could put more termination to make it faster

2. Boyer-Moore method - Find the ones standing out by canceling each other's vote
https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm
https://gregable.com/2013/10/majority-vote-algorithm-find-majority.html

3. Using array value as index
  When all values in the array is between range [0, len(array)], could use value as idx to solve problems.

4. BST find previous/next predcessor/successor

5. Slow and fast pointers

6. KMP substring index

7. Linked list use Speed(fast) = Speed(slow) * 2 could find mid point and find loops.

8. two passes: first pass select a candidate, second pass check if it is legit.

9. binary search either begin + 1< end or begin < end begin = mid + 1 could avoid infinite loop

10. When solving string problems and requires hashmap, could use a XX[256] array if all chars are ASCII

11. when doing level or weight, keep adding the previous ones could achieve reverse level or weight sum.

12. When finding kth largest/smallest, count the elements that are snaller/larger than k could work

13. binary right set to len(nums) could go one more to the end if not found

